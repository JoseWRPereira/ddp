I"Å^<h1 id="bot√£o-led">Bot√£o LED</h1>

<p>Agora que sabemos como acionar uma sa√≠da digital, vamos fazer a leitura de uma entrada tamb√©m digital, utilizando um bot√£o pulsador (<em>push button</em>) para ligar um LED.</p>

<p>Toda constru√ß√£o de programa deve ser feita de forma incremental, iniciando com uma estrutura b√°sica e agregando parte a parte do c√≥digo at√© atingir o objetivo.</p>

<h2 id="objetivo">Objetivo</h2>

<p>Acionar um LED copiando o estado l√≥gico de um bot√£o.</p>

<!--more-->

<h2 id="circuito-hardware">Circuito (<em>Hardware</em>)</h2>

<p>O circuito para atender o objetivo possui um LED como elemento de sa√≠da e um bot√£o pulsador como elemento de entrada.</p>

<p>Na sa√≠da temos uma sa√≠da configurada como fonte (<em>source</em>), como tratado em <a href="/ddp/2020/P0101-piscaLED">P0101 - Pisca LED</a>.</p>

<p>A entrada deve possuir um estado l√≥gico bem definido, mas um bot√£o pulsador n√£o garante esse estado l√≥gico, pois possui apenas dois contatos, podendo sua configura√ß√£o ser normalmente aberto (NA) ou normalmente fechado(NF). Na Figura 1 √© utilizado um bot√£o pulsador NA, que √© a configura√ß√£o mais comum.</p>

<p>Para garantir o tal estado l√≥gico bem definido, √© montado um ramo com o bot√£o e um resistor, geralmente com 10kŒ©, ligados em s√©rie, entre o Vcc e o GND. No ponto de conex√£o entre esses dois componentes temos, em rela√ß√£o ao terra (<em>GND</em>), uma tens√£o que √© a tens√£o do componente conectado ao terra. Este ponto √© conectado ao pino do uC, assim a tens√£o no pino √© a mesma tens√£o sobre o componente ligado ao terra.</p>

<p>As duas configura√ß√µes poss√≠ves s√£o mostradas na Figura 1(a) e 1(b), em que o bot√£o est√° conectado ao Vcc e a outra em que o bot√£o est√° conectado ao terra.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1(a): Resistor de <em>Pull-down</em></th>
      <th style="text-align: center">Figura 1(b): Resistor de <em>Pull-up</em></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/P0102-botaoLED-pulldownres.gif?raw=true" alt="circuito" /></td>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/P0102-botaoLED-pullupres.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Na configura√ß√£o <em>pull-down</em> o resistor est√° conectado ao terra, o que garante, quando o bot√£o estiver aberto, o n√≠vel l√≥gico 0 (terra/GND).</p>

<p>Ao pressionar o bot√£o, ele fecha e conecta o ponto de conex√£o com o pino ao Vcc, aplicando o n√≠vel l√≥gico 1 a ele.</p>

<p>Na configura√ß√£o <em>pull-up</em> o resistor est√° conectado ao positivo da fonte, Vcc. O bot√£o na condi√ß√£o de n√£o acionado est√° com contato aberto, assim a tens√£o sobre ele √© a tens√£o da fonte, nesse caso 5V, conforme a 2¬™ lei de Kirchhoff, garantindo o n√≠vel l√≥gico 1.</p>

<p>Ao pressionar o bot√£o, ele fecha, ligando o ponto de conex√£o com o pino do uC ao GND, aplicando o n√≠vel l√≥gico 0 a ele.</p>

<p>A configura√ß√£o com o resistor de <em>pull-down</em> √© a que proporciona uma l√≥gica direta a entrada do dado: bot√£o pressionado.</p>

<h2 id="programa-firmware">Programa (<em>Firmware</em>)</h2>

<p>A Figura 2 mostra a √°rvore de diret√≥rios do projeto em que s√£o utilizados dois arquivos, sendo que o <code class="language-plaintext highlighter-rouge">main.c</code> possui o programa e o <code class="language-plaintext highlighter-rouge">config.h</code> as diretivas de configura√ß√£o.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 2: √Årvore de diret√≥rio do projeto</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/projectTree.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>O arquivo de configura√ß√£o deve ser inclu√≠do no <code class="language-plaintext highlighter-rouge">main.c</code> com o comando <code class="language-plaintext highlighter-rouge">#include "config.h"</code> logo no in√≠cio do c√≥digo.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef CONFIG_H
#define CONFIG_H
</span>
<span class="cp">#pragma config FOSC  = INTRC_NOCLKOUT   // Fonte de clock: oscilador interno
#pragma config WDTE  = OFF              // Desabilita WatchDog Timer 
#pragma config MCLRE = OFF              // Desab. Master Clear via pino
#pragma config LVP   = OFF              // Desab. grava√ß√£o em baixa tens√£o
</span>
<span class="cp">#define _XTAL_FREQ     4000000          // Freq. clock interno: 4MHz(padr√£o)
</span>
<span class="cp">#endif
</span></code></pre></div></div>

<p>A separa√ß√£o das diretivas de compila√ß√£o √© interessante por facilitar o tratamento dessas configura√ß√µes, no caso de mudan√ßas ou mesmo na inclus√£o de outras diretivas. Esse arquivo pode ser copiado para os demais projetos.</p>

<p>Segue o c√≥digo fonte do <code class="language-plaintext highlighter-rouge">main.c</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * File:   main.c
 * Author: josewrpereira
 *
 * Created on 23 de Setembro de 2019, 13:03
 * 
 * IDE:         MPLAB X IDE v3.15
 * Compiler:    XC8 v1.45
 * OS:          Deepin 15.11 X86_64
 * Kernel:      4.15.0-30deepin-generic
 * 
 * Objetivo: 
 *      Acionar um LED atrav√©s do estado l√≥gico de um bot√£o
 * 
 * Pinos    |n¬∫     |Conex√£o
 *  VDD     |11,32  | Alimenta√ß√£o (Vcc/+5V)
 *  VSS     |12,31  | Alimenta√ß√£o (GND/0V)
 *  RD0     |19     |LED (source)
 *  RD3     |22     |Bot√£o
 */</span>


<span class="cp">#include &lt;xc.h&gt;                 // Inclui biblioteca padr√£o do compilador XC8 
</span>                                <span class="c1">// para microcontroladores Microchip.</span>
<span class="cp">#include "config.h"             // Inclui arq. de config. (biblioteca) local.
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>                 <span class="c1">// Fun√ß√£o principal = main.</span>
<span class="p">{</span>                               <span class="c1">// In√≠cio do bloco da fun√ß√£o main.</span>
    <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>          <span class="c1">// Inicia RD0 com o valor 0.</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>       <span class="c1">// Configura RD0 como Sa√≠da.</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>       <span class="c1">// Configura RD3 como Entrada;</span>
                                <span class="c1">// N√£o precisa inicializa√ß√£o do valor do pino.</span>
    
    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>                  <span class="c1">// La√ßo de repeti√ß√£o infinito.</span>
    <span class="p">{</span>                           <span class="c1">// Inicio do la√ßo de repeti√ß√£o.</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD3</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span><span class="c1">// Condi√ß√£o: Se o bot√£o estiver pressionado.</span>
            <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// Liga RD0.</span>
        <span class="k">else</span>                    <span class="c1">// Sen√£o.</span>
            <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// Desliga RD0.</span>
    <span class="p">}</span>                           <span class="c1">// Fim do la√ßo de repeti√ß√£o.</span>
    <span class="k">return</span><span class="p">;</span>                     <span class="c1">// Caracteriza main como uma fun√ß√£o sem retorno.</span>
<span class="p">}</span>                               <span class="c1">// Fim do bloco da fun√ß√£o main.</span>

</code></pre></div></div>

<h2 id="estrutura-do-programa">Estrutura do programa</h2>

<p>O programa presente no arquivo fonte <code class="language-plaintext highlighter-rouge">main.c</code> possui o seguinte arranjo:</p>
<ul>
  <li>Coment√°rios;</li>
  <li>Inclus√£o de bibliotecas;</li>
  <li>Programa principal.</li>
</ul>

<h3 id="coment√°rios">Coment√°rios</h3>
<p>Os coment√°rios est√£o descritos em <a href="/ddp/2020/P0101-piscaLED">P0101 - Pisca LED</a> e s√£o semelhantes em todos os projetos aqui apresentados, assim ser√£o omitidos para simplificar e focar no c√≥digo que resolve o objetivo apresentado, mas √© importante que voc√™ fa√ßa os coment√°rios em todos os seus projetos.</p>

<h3 id="inclus√£o-de-bibliotecas">Inclus√£o de bibliotecas</h3>
<p>Note que al√©m da biblioteca padr√£o <code class="language-plaintext highlighter-rouge">xc.h</code>, agora est√° inclu√≠do o arquivo de cabe√ßalho <code class="language-plaintext highlighter-rouge">config.h</code>, como j√° citado anteriormente.</p>

<h3 id="programa-principal">Programa principal</h3>

<p>O programa principal pode ser dividido em duas partes: configura√ß√£o e la√ßo de repeti√ß√£o.</p>

<p>O trecho de configura√ß√£o no c√≥digo inicializa o pino RD0 do PORTD com o valor zero, que √© para iniciar com o LED desligado.</p>

<p>A linha seguinte configura o RD0 como sa√≠da, porque √© o pino que aciona o LED.</p>

<p>Em seguida √© configurado como entrada o pino RD3.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>          <span class="c1">// Inicia RD0 com o valor 0.</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>       <span class="c1">// Configura RD0 como Sa√≠da.</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>       <span class="c1">// Configura RD3 como Entrada;</span>
</code></pre></div></div>

<p>Note que o RD3 n√£o √© inicializado porque o dado vem de fora do uC, assim n√£o faz sentido inicializ√°-lo pois n√£o √© um dado de sa√≠da.</p>

<p>O loop infinito possui o ciclo de execu√ß√£o que atende o objetivo proposto sendo estruturado da seguinte forma:</p>
<ul>
  <li>leitura do estado l√≥gico no pino de entrada;</li>
  <li>ligar o LED se o estado l√≥gico do pino √© 1;</li>
  <li>desligar o LED se o estado l√≥gico do pino √© 0;</li>
</ul>

<p>Segue a codifica√ß√£o da estrutura do la√ßo de repeti√ß√£o.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>                  <span class="c1">// La√ßo de repeti√ß√£o infinito.</span>
    <span class="p">{</span>                           <span class="c1">// Inicio do la√ßo de repeti√ß√£o.</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD3</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span><span class="c1">// Condi√ß√£o: Se o bot√£o estiver pressionado.</span>
            <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// Liga RD0.</span>
        <span class="k">else</span>                    <span class="c1">// Sen√£o.</span>
            <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// Desliga RD0.</span>
    <span class="p">}</span>                           <span class="c1">// Fim do la√ßo de repeti√ß√£o.</span>
</code></pre></div></div>

<h2 id="utilizando-defines">Utilizando defines</h2>

<p>Uma das ferramentas mais interessantes de trabalhar √© utilizando os <code class="language-plaintext highlighter-rouge">defines</code> pois facilitam muito a interpreta√ß√£o e leitura do c√≥digo, pois pode-se utilizar um termo que fa√ßa sentido com a aplica√ß√£o.</p>

<p>Sendo assim, pode-se definir os pinos utilizados com um termo mais coerente com as suas fun√ß√µes.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
</span>
<span class="cp">#define LED     PORTDbits.RD0
#define BOTAO   PORTDbits.RD3
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">BOTAO</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
            <span class="n">LED</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Observando a estrutura condicional dentro do la√ßo de repeti√ß√£o, pode-se ver que a leitura e interpreta√ß√£o do funcionamento do programa est√° mais evidente.</p>

<p><code class="language-plaintext highlighter-rouge">Se o BOTAO estiver acionado</code>
<code class="language-plaintext highlighter-rouge">ligar o LED</code>
<code class="language-plaintext highlighter-rouge">sen√£o</code>
<code class="language-plaintext highlighter-rouge">desligar o LED</code></p>

<p>A estrutura condicional <code class="language-plaintext highlighter-rouge">if</code> verifica se o conte√∫do entre os par√™nteses √© verdadeiro para executar o c√≥digo √† seguir. A condi√ß√£o <code class="language-plaintext highlighter-rouge">BOTAO == 1</code> √© uma compara√ß√£o que verifica a igualdade(<code class="language-plaintext highlighter-rouge">==</code>) entre os dois termos <code class="language-plaintext highlighter-rouge">BOTAO</code> e <code class="language-plaintext highlighter-rouge">1</code>.</p>

<p>A condi√ß√£o verdadeira dentro da estrutura do <code class="language-plaintext highlighter-rouge">if</code> n√£o precisa ser uma compara√ß√£o, pode ser o estado l√≥gico de uma vari√°vel ou de um registrador. Assim pode-se utilizar a seguinte condi√ß√£o: <code class="language-plaintext highlighter-rouge">if( BOTAO )</code> pois <code class="language-plaintext highlighter-rouge">BOTAO</code> √© o <code class="language-plaintext highlighter-rouge">PORTDbits.RD3</code>, que √© um registrador e pode assumir os estado l√≥gicos 1 ou 0, respectivamente verdadeiro ou falso.</p>

<p>O c√≥digo abaixo utiliza a condicional sem a compara√ß√£o, apenas com o estado l√≥gico da entrada.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
</span>
<span class="cp">#define LED     PORTDbits.RD0
#define BOTAO   PORTDbits.RD3
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">BOTAO</span> <span class="p">)</span>
            <span class="n">LED</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="simplificando-o-c√≥digo">Simplificando o c√≥digo</h2>

<p>O processo de codifica√ß√£o envolve muitas etapas e compromissos com um equil√≠brio entre simplicidade, tamanho e velocidade de execu√ß√£o, sendo que o ideal seria um c√≥digo o <strong>mais simples</strong> poss√≠vel, com o <strong>menor tamanho</strong> e com a maior <strong>velocidade de execu√ß√£o</strong>. Por√©m essa condi√ß√£o combinada √© praticamente uma utopia. Ent√£o o programador deve escolher qual dessas caracter√≠sticas √© priorit√°ria.</p>

<p>A simplifica√ß√£o do codigo exposto acima, num dos raros casos, pode ser melhorado nesses tr√™s aspectos.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
</span>
<span class="cp">#define LED             PORTDbits.RD0
#define BOTAO           PORTDbits.RD3
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">LED</span> <span class="o">=</span> <span class="n">BOTAO</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Como a condi√ß√£o para acionar o LED √© o bot√£o estar pressionado, a l√≥gica √© direta nesse acionamento. Assim, basta atribuir o valor da entrada (<code class="language-plaintext highlighter-rouge">BOTAO</code>) √† sa√≠da (<code class="language-plaintext highlighter-rouge">LED</code>).</p>

<p>O c√≥digo dentro do la√ßo de repeti√ß√£o assim ficou mais simples de compreender, menor em extens√£o e por consequ√™ncia com execu√ß√£o mais r√°pida.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Bot√£o com resistor de <em>pull-down</em></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/P0102-botaoLED-pulldownres.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<h2 id="invers√£o-da-entrada">Invers√£o da entrada</h2>

<p>Como visto no in√≠cio desta postagem, existe a possibilidade de ligar o bot√£o com um resistor de <em>pull-down</em> ou <em>pull-up</em>. Caso a liga√ß√£o j√° esteja feita, √© muito mais simples mudar o estado l√≥gico do pino no programa do que mudar no circuito, seja no esquem√°tico ou na montagem.</p>

<p>A condi√ß√£o do circuito abaixo utilizando o c√≥digo j√° apresentado, mostra que o comportamento do LED est√° invertido em rela√ß√£o ao pressionar do bot√£o. O bot√£o pressionado apaga o LED e o bot√£o n√£o pressionado mant√©m o LED ligado.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Bot√£o com resistor de <em>pull-up</em></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/P0102-botaoLED-pullupres.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Para inverter o estado l√≥gico da entrada, e garantir que ao pressionar o bot√£o o LED acenda, basta inserir o operador de invers√£o l√≥gica <code class="language-plaintext highlighter-rouge">!</code>, equivalente a uma porta l√≥gica inversora: <code class="language-plaintext highlighter-rouge">LED = !BOTAO;</code>. Essa instru√ß√£o significa que o LED recebe o estado l√≥gico inverso do BOTAO.</p>

<p>Segue o c√≥digo com o estado l√≥gico do bot√£o invertido.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
</span>
<span class="cp">#define LED             PORTDbits.RD0
#define BOTAO           PORTDbits.RD3
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">LED</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">LED</span> <span class="o">=</span> <span class="o">!</span><span class="n">BOTAO</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Bot√£o com resistor de <em>pull-up</em>  e invers√£o de estado l√≥gico em c√≥digo</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0102/P0102-botaoLED-pullupresInv.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Agora √© a sua vez!</p>

<p>Crie o seu projeto, copie o c√≥digo, execute-o, procure os erros, arrume-os, seja resiliente, leia novamente a explica√ß√£o, busque outras fontes, pergunte, responda, fa√ßa altera√ß√µes conscientes no c√≥digo, explore, divirta-se.</p>

<p>Ficou com alguma d√∫vida, entre em contato.</p>

<p>Bom trabalho!</p>

<p><a href="/ddp/docs/tecnology/ucPIC">Voltar</a></p>
:ET