I"H<h3 id="objetivo">Objetivo</h3>

<p>Acionar um LED de forma intermitente com frequência de 1Hz.</p>

<!--more-->

<h2 id="circuito">Circuito</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1: Circuito de acionamento do LED</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/2020/tUcPIC/imgP0101/circuito.jpg" alt="circuito" /></td>
    </tr>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/circuito.jpg" alt="circuito" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: Próprio autor</td>
    </tr>
  </tbody>
</table>

<h2 id="programa-firmware">Programa (<em>Firmware</em>)</h2>

<pre><code class="language-C">/*
 * File:   main.c
 * Author: josewrpereira
 * 
 * Created on 21 de Setembro de 2019, 19:01
 * 
 * IDE:         MPLAB X IDE v3.15
 * Compiler:    XC8 v1.45
 * OS:          Deepin 15.11 X86_64
 * Kernel:      4.15.0-30deepin-generic
 * 
 * Objetivo: 
 *      Piscar o LED com intervalo de 500 ms
 * 
 * Pinos    |nº     |Conexão
 *  VDD     |11,32  | Alimentação (Vcc/+5V)
 *  VSS     |12,31  | Alimentação (GND/0V)
 *  RD0     |19     | LED
 */


#include &lt;xc.h&gt;                 // Inclui biblioteca padrão do compilador XC8 
                                // para microcontroladores Microchip.

#pragma config FOSC  = INTRC_NOCLKOUT   // Fonte de clock: oscilador interno
#pragma config WDTE  = OFF      // Desabilita WatchDog Timer 
#pragma config MCLRE = OFF      // Desab. Master Clear via pino
#pragma config LVP   = OFF      // Desab. gravação em baixa tensão

#define _XTAL_FREQ     4000000  // Freq. clock interno: 4MHz(padrão)

void main(void)                // Função principal = main.
{                               // Início do bloco da função main.
    PORTDbits.RD0 = 0;          // Inicia RD0 com o valor 0.
    TRISDbits.TRISD0 = 0;       // Configura RD0 como Saída.
    
    while( 1 )                  // Laço de repetição infinito.
    {                           // Inicio do laço de repetição.
        PORTDbits.RD0 = 1;      // Liga RD0.
        __delay_ms(500);        // Espera 500 ms.
        PORTDbits.RD0 = 0;      // Desliga RD0.
        __delay_ms(500);        // Espera 500 ms.
    }                           // Fim do laço de repetição.
    return;                     // Caracteriza main como uma função sem retorno.
}                               // Fim do bloco da função main.

</code></pre>

<h3 id="comentários">Comentários</h3>

<p>Os comentários são importantes para evidenciar ou explicar trechos de código que não são explícitos, de forma a garantir uma boa compreensão para quem venha a estudar o código.</p>

<p>Em linguagem C os comentátios podem ser feitos em <code class="language-plaintext highlighter-rouge">blocos</code> ou em <code class="language-plaintext highlighter-rouge">linha</code>:</p>

<ul>
  <li>Bloco: tem como delimitador inicial <code class="language-plaintext highlighter-rouge">/*</code> e o final <code class="language-plaintext highlighter-rouge">*/</code>. Todo o conteúdo entre os delimitadores não são considerados pelo compilador, sendo úteis apenas para os programadores.</li>
  <li>Linha: a marcação <code class="language-plaintext highlighter-rouge">//</code> indica que todo o conteúdo à direita até o fim da linha é comentário, e da mesma forma não é considerado pelo compilador.</li>
</ul>

<p>Uma das informações que considero ser útil é mostrar quais pinos são usados e em qual aplicação, conforme segue:</p>

<pre><code class="language-C"> /*
 * Pinos    |nº     |Conexão
 *  VDD     |11,32  | Alimentação (Vcc/+5V)
 *  VSS     |12,31  | Alimentação (GND/0V)
 *  RD0     |19     | LED
*/
</code></pre>

<h3 id="inclusões-de-bibliotecas">Inclusões de bibliotecas</h3>

<p>O código <code class="language-plaintext highlighter-rouge">#include &lt;xc.h&gt;</code> inclui a biblioteca padrão do compilador XC8 para microcontroladores Microchip, de modo a oferecer funções básicas e as definições ou nomenclaturas dos registradores.</p>

<h3 id="configurações-de-operação-do-uc">Configurações de operação do uC</h3>

<p>Algumas diretivas de compilação como <code class="language-plaintext highlighter-rouge">#pragma config</code> possibilitam o acesso exclusivo a alguns periféricos apenas durante a programação, entre eles temos as seguintes configurações básicas:</p>

<pre><code class="language-C">#pragma config FOSC  = INTRC_NOCLKOUT   // Fonte de clock: oscilador interno
#pragma config WDTE  = OFF              // Desabilita WatchDog Timer 
#pragma config MCLRE = OFF              // Desab. Master Clear via pino
#pragma config LVP   = OFF              // Desab. gravação em baixa tensão
</code></pre>

<p>Um destaque para a primeira linha em que o registrador <code class="language-plaintext highlighter-rouge">FOSC</code> é configurado para o oscilador interno. Por uma questão de simplificação de montagem inicial do circuito, optou-se por tal configuração por não necessitar de um cristal oscilador e seus capacitores conectados externamente.</p>

<h3 id="definições">Definições</h3>

<p>A definição <code class="language-plaintext highlighter-rouge">_XTAL_FREQ</code> deve assumir o valor do oscilador que estiver sendo utilizado na configuração, neste caso, o oscilador interno com o valor padrão é 4MHz.</p>

<pre><code class="language-C">#define _XTAL_FREQ     4000000
</code></pre>

<h3 id="programa-principal">Programa principal</h3>

<p>Todo programa em linguagem C deve possuir uma função principal, cujo nome é obrigatório <code class="language-plaintext highlighter-rouge">main</code>. 
As demais funções devem possuir nomes de acordo com a tarefa que executam, mas são de total responsabilidade do programador.</p>

<p>Como no microcontrolador não há um sistema operacional para invocar a execução do programa, a função principal não necessita de um retorno, bem como não possui argumentos de entrada.</p>

<pre><code class="language-C">void main(void)
{                               // Início do bloco da função main.

    return;                     // Caracteriza main como uma função sem retorno.
}                               // Fim do bloco da função main.
</code></pre>

<h3 id="parametrizar-habilitar-e-inicializar">Parametrizar, habilitar e inicializar</h3>

<p>A estrutura básica do programa para o microcontrolador(<em>firmware</em>) consiste em dois blocos de código, sendo o primeiro para a configuração e o segundo para o programa.</p>

<p>O bloco de configuração consiste em parametrizar, habilitar e/ou inicializar os periféricos e dados utilizados no programa.</p>

<p>O bloco para o programa consiste no código que normalmente é executado de forma repetida enquanto o sistema estiver em execução, ou seja, enquanto o microcontrolador estiver ligado.</p>

<p>O programa aqui apresentado utiliza o pino D0 do PORTD do microcontrolador por ser o PORT mais fácil de trabalhar.</p>

<blockquote>
  <blockquote>
    <p>Como esse pino é parametrizado, habilitado e inicializado?</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p>Como configurar o pino como saída?</p>
  </blockquote>
</blockquote>

<h4 id="registradores">Registradores</h4>

<p>Todos os pinos possuem ao menos um circuito específico a eles conectados para realizar as funções as quais foram planejadas, entre elas, entrada digital, saída digital, contadores, comunicação, leitura de sinal analógico, etc.</p>

<p>Todos os periféricos, como circuitos, são configurados por sinais elétricos em portas específicas, e tais sinais podem ser acessados através do mapeamento desses sinais em um conjunto de registradores específico denominados <strong>Registradores de Funções Especiais</strong> (<em>SFR - Special Function Register</em>).</p>

<p>A Figura 2 mostra o mapa de registradores do PIC16F887 e pode ser acessada na página 25 do seu <a href="http://ww1.microchip.com/downloads/en/devicedoc/41291d.pdf"><em>datasheet</em></a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 2: Mapa dos Registradores de Funções Especiais (<em>SFR</em>)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/sfr-PIC16F886-7.png" alt="SFR" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887</td>
    </tr>
  </tbody>
</table>

<p>Em destaque estão os registradores <code class="language-plaintext highlighter-rouge">PORTD</code> e <code class="language-plaintext highlighter-rouge">TRISD</code>, que são os responsáveis pela configuração e manipulação dos pinos conectados ao PORTD, inclusive o pino <code class="language-plaintext highlighter-rouge">D0</code> em que está conectado o ramo do circuito com o LED.</p>

<p>A Figura 3 mostra a representação do registrador PORTD utilizado para ler ou escrever um nível lógico no pino 19 ou RD0 do microcontrolador.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 3: Registrador PORTD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/portdreg.png" alt="PORTDreg" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887</td>
    </tr>
  </tbody>
</table>

<p>O PORTD possui 8 bits acessíveis individualmente e independentes, como indicado pelo <code class="language-plaintext highlighter-rouge">R/W</code> acima do nome de cada bit. 
O <code class="language-plaintext highlighter-rouge">-x</code> significa que o valor de <em>reset</em> é desconecido, podendo ser 0 ou 1, mas nã é possível afirmar qual valor que estará cada bit ao ligar ou religar o microcontrolador.</p>

<p>Ao <em>setar</em> qualquer um dos bits do registrador com a instrução <code class="language-plaintext highlighter-rouge">PORTDbits.RDn = 1;</code> sendo <code class="language-plaintext highlighter-rouge">n</code> o número do bit que se está manipilando, o respectivo pino assume a tensão de alimentação do chip, +5V.</p>

<p>Ao <em>resetar</em> qualquer um dos bits do registrador com a instrução <code class="language-plaintext highlighter-rouge">PORTDbits.RDn = 0;</code> sendo <code class="language-plaintext highlighter-rouge">n</code> o número do bit que se está manipilando, o respectivo pino assume o valor de 0V.</p>

<p>Para realizar a leitura do pino, pode-se utilizar o seguinte comando: <code class="language-plaintext highlighter-rouge">var = PORTDbits.RDn;</code>, sendo <code class="language-plaintext highlighter-rouge">n</code> o número do bit acessado e <code class="language-plaintext highlighter-rouge">var</code> a variável que recebe o estado do pino acessado.</p>

<p>Os dois estados lógicos são representados com os valores booleanos 0 e 1 e tais estados são assumidos quando a tensão no pino está dentro de um determinado intervalo de tensao:</p>
<ul>
  <li>2,0V &lt; Nível Lógico Alto &lt; 5.0V</li>
  <li>0,0V &lt; Nível Lógico Baixo &lt; 0,8V</li>
</ul>

<p>Note que para o intervalo entre 0,8 e 2,0, não há um estado bem definido, assim não é possível garantir para qual estado lógico será interpretada a leitura do pino.</p>

<p>A Figura 4 mostra a representação do registrador TRISD utilizado para configura o pino como entrada ou saída de dados no pino 19 ou RD0 do microcontrolador.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 4: Registrador TRISD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/trisdreg.png" alt="TRISDreg" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 pág. 57</td>
    </tr>
  </tbody>
</table>

<p>O TRISD possui 8 bits acessíveis individualmente e independentes, como indicado pelo <code class="language-plaintext highlighter-rouge">R/W</code> acima do nome de cada bit. 
O <code class="language-plaintext highlighter-rouge">-1</code> significa que o valor de <em>reset</em> é <code class="language-plaintext highlighter-rouge">1</code>, ou seja, todos os pinos são inicializados como entrada.</p>

<p>Um pino do PORTD pode ser configurado como entrada de dados com a seguinte instrução: <code class="language-plaintext highlighter-rouge">TRISDbits.TRISDn = 1;</code>, onde <code class="language-plaintext highlighter-rouge">n</code> é o número do bit que está se configurando.</p>

<p>Para a configuração do pino como saída pode-se utilizar o seguinte comando: <code class="language-plaintext highlighter-rouge">TRISDbits.TRISDn = 0;</code>.</p>

<p>Tais registradores são um mapeamento do circuito da Figura 5, conforme segue.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 5: Diagrama dos pinos RD&lt;4:0&gt;</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/portD4-0_diagrama.png" alt="DiagramaRD0-4" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 pág. 58</td>
    </tr>
  </tbody>
</table>

<p>Note que as ações de escrita e leitura de determinados registradores produz um sinal de controle no circuito do respectivo pino. O terminal <code class="language-plaintext highlighter-rouge">WR PORTD</code> é acionado quando a ação de escrita no PORTD ocorre. O mesmo ocorre para <code class="language-plaintext highlighter-rouge">WR TRISD</code>. Para a ação de leitura do registrador, é gerado um sinal de acionamento em <code class="language-plaintext highlighter-rouge">RD TRISD</code> ou <code class="language-plaintext highlighter-rouge">RD PORTD</code>, respectivamente.</p>

<p>Os comandos de escrita acionam biestáveis (<em>flip-flops</em>) para armazenar a configuração ou o último dado escrito no pino. Para a leitura há apenas <em>buffers</em> de acesso ao dado do pino mediante os sinais de controle.</p>

<p>As instruções de inicialização e configuração são apresentados abaixo e cada linha está ilustrada nas Figuras 6 e 7 em seguida:</p>

<pre><code class="language-C">    PORTDbits.RD0 = 0;          // Inicia RD0 com o valor 0.
    TRISDbits.TRISD0 = 0;       // Configura RD0 como Saída.
</code></pre>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 6: Diagrama dos pinos RD0-4</th>
      <th style="text-align: center">Figura 7: Diagrama dos pinos RD0-4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/portD0_0.png" alt="PORTD0-0" /></td>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/P0101-blinkLED/blob/master/img/trisd0_0.png" alt="TRISD0-0" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 pág. 58</td>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 pág. 58</td>
    </tr>
  </tbody>
</table>

<h3 id="ao-infinito-e-além">Ao infinito e além</h3>
<p>A condição mais comum é que o programa fique sendo executado de forma repetida durante todo o período em que o microcontrolador estiver ligado, assim utiliza-se um laço de repetição com uma condição que é verdadeira sempre.</p>

<pre><code class="language-C">    while( 1 )                  // Laço de repetição infinito.
    {                           // Inicio do laço de repetição.
    }                           // Fim do laço de repetição.
</code></pre>

<p>Note que em linguagem C, para uma variável numérica, todo valor diferente de zero possui o estado lógico 1 (verdadeiro), enquanto que apenas o zero possui o estado lógico 0 (falso).</p>

<p>Após a configuração do pino, sua inicialização, dentro do loop infinito a sequência de passos que atende o objetivo proposto.</p>

<ol>
  <li>Acionar RD0, ligando o LED;</li>
  <li>Produzir um atraso de 500ms;</li>
  <li>Desacionar RD0, desligando o LED;</li>
  <li>Produzir um atraso de 500ms.</li>
</ol>

<p>Codificando esses passos temos:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>      <span class="c1">// Liga RD0.</span>
        <span class="n">__delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>        <span class="c1">// Espera 500 ms.</span>
        <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// Desliga RD0.</span>
        <span class="n">__delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>        <span class="c1">// Espera 500 ms.</span>
</code></pre></div></div>

<p>Os quatro passos completam o ciclo de acionamento do LED, e então este ciclo se repete em função do laço a qual ele está inserido.</p>

<p>Garantindo assim a correta execução e atendendo ao objetivo inicial de acionar o LED de forma intermitente com frequẽncia de 1Hz, ou seja, 500ms ligado e o mesmo tempo desligado.</p>

<div class="alert alert-warning" role="alert">
<h4 class="alert-heading">warning</h4>
This is a warning
</div>

<div class="alert alert-danger" role="alert">
<h4 class="alert-heading">danger</h4>
This alerts danger!
</div>

<div class="alert alert-success" role="alert">
<h4 class="alert-heading">success</h4>
This alerts success
</div>

<div class="alert alert-info" role="alert">
<h4 class="alert-heading">info</h4>
This is useful information.
</div>

<div class="alert alert-primary" role="alert">
<h4 class="alert-heading">primary</h4>
This is a primary alert
</div>

<div class="alert alert-secondary" role="alert">
<h4 class="alert-heading">secondary</h4>
This is a secondary alert
</div>
:ET