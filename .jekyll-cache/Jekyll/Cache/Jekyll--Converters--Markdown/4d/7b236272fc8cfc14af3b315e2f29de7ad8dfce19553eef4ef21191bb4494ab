I"Ï2<h1 id="detec√ß√£o-de-borda-em-bot√£o-pulsador">Detec√ß√£o de borda em bot√£o pulsador</h1>

<p>A leitura simples de um bot√£o implica em alguns comportamentos n√£o desejados como um incremento maior do que a quantidade de vezes que um bot√£o √© pressionado. Para solucionar esse problema pode-se utilizar n√£o o estado l√≥gico do bot√£o, mas sim o evendo associado a mudan√ßa de estado, evento √∫nico dentro de um ciclo de opera√ß√£o.</p>

<h2 id="objetivo">Objetivo</h2>

<p>Detectar as bordas de subida e descida em bot√£o pulsador.</p>

<!--more-->

<h2 id="1-circuito-hardware">1. Circuito (<em>Hardware</em>)</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.1: Incremento por borda de subida e decremento por borda de descida</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0112/bordaBotaoPulsador.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<h2 id="2-programa-firmware">2. Programa (<em>Firmware</em>)</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 2: √Årvore de diret√≥rio do projeto</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0112/projectTree.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<h2 id="estrutura-do-programa">Estrutura do programa</h2>

<p>O programa presente no arquivo fonte <code class="language-plaintext highlighter-rouge">main.c</code> possui o seguinte arranjo:</p>
<ul>
  <li>Inclus√£o de bibliotecas;</li>
  <li>Programa principal;
    <ul>
      <li>Declara√ß√£o e inicializa√ß√µes;</li>
      <li>La√ßo de repeti√ß√£o.</li>
    </ul>
  </li>
</ul>

<h3 id="programa-principal">Programa principal</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * File:   main.c
 * Author: josewrpereira
 *
 * Created on 13 de Agosto de 2020, 23:02:21
 * 
 * -------------------------------------------------
 *          MAPA DE ENTRADAS E SAIDAS
 * -------------------------------------------------
 *  Pinos   |n¬∫     |Conex√£o
 * ---------|-------|-------------------------------
 *  RB0     |33     | Segmento a
 *  RB1     |34     | Segmento b
 *  RB2     |35     | Segmento c
 *  RB3     |36     | Segmento d
 *  RB4     |37     | Segmento e
 *  RB5     |38     | Segmento f
 *  RB6     |39     | Segmento g
 *  RB7     |40     | Segmento p
 *  RD7     |30     | Hab. Dezena (Catodo comum)
 *  RD6     |29     | Hab. Unidade (Catodo comum)
 * ---------|-------|-------------------------------
 *  RD2     |21     | Bot√£o -1
 *  RD3     |22     | Bot√£o +1
 * -------------------------------------------------
 * -------------------------------------------------
 */</span>

<span class="cp">#include &lt;xc.h&gt;
#include "config.h"
#include "delay.h"
#include "disp7seg.h"
#include "botao.h"
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">disp7segX2_init</span><span class="p">();</span>
    <span class="n">botao_init</span><span class="p">();</span>
    
    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">disp7segX2</span><span class="p">(</span> <span class="n">num</span> <span class="p">);</span>
        
        <span class="k">if</span><span class="p">(</span> <span class="n">b1_bordaSubida</span><span class="p">()</span> <span class="p">)</span>
            <span class="n">num</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span> <span class="o">%</span> <span class="mi">100</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">b0_bordaDescida</span><span class="p">()</span> <span class="p">)</span>
            <span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">==</span><span class="mi">0</span> <span class="o">?</span> <span class="mi">99</span> <span class="o">:</span> <span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        
        <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="inclus√£o-de-bibliotecas">Inclus√£o de bibliotecas</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * File:   botao.c
 * Author: josewrpereira
 *
 * Created on 13 de Agosto de 2020, 23:00
 * 
 * -------------------------------------------------
 *          MAPA DE ENTRADAS E SAIDAS
 * -------------------------------------------------
 *  Pinos   |n¬∫     |Conex√£o
 * ---------|-------|-------------------------------
 *  RD2     |21     | Bot√£o -1
 *  RD3     |22     | Bot√£o +1
 * -------------------------------------------------
 */</span>

<span class="cp">#include &lt;xc.h&gt;
</span>
<span class="cp">#define B0      PORTDbits.RD2
#define B1      PORTDbits.RD3
</span>
<span class="kt">void</span> <span class="nf">botao_init</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">TRISDbits</span><span class="p">.</span><span class="n">TRISD3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>


<span class="c1">// ************************** Bot√£o 0</span>

<span class="kt">char</span> <span class="nf">b0</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">PORTBbits</span><span class="p">.</span><span class="n">RB0</span> <span class="p">);</span>
<span class="p">}</span>

<span class="kt">char</span> <span class="n">b0Anterior</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">char</span> <span class="nf">b0_bordaSubida</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b0: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000001000000000000000000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="n">B0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">b0Anterior</span><span class="p">;</span>
    <span class="n">b0Anterior</span> <span class="o">=</span> <span class="n">B0</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>
<span class="kt">char</span> <span class="nf">b0_bordaDescida</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b0: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000000000000000000010000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="o">!</span><span class="n">B0</span> <span class="o">&amp;&amp;</span> <span class="n">b0Anterior</span><span class="p">;</span>
    <span class="n">b0Anterior</span> <span class="o">=</span> <span class="n">B0</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>
<span class="kt">char</span> <span class="nf">b0_borda</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b0: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000001000000000000010000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="p">(</span><span class="n">B0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">b0Anterior</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">B0</span> <span class="o">&amp;&amp;</span> <span class="n">b0Anterior</span><span class="p">);</span>
    <span class="n">b0Anterior</span> <span class="o">=</span> <span class="n">B0</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>



<span class="c1">// ************************** Bot√£o 1</span>

<span class="kt">char</span> <span class="nf">b1</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">B1</span> <span class="p">);</span>
<span class="p">}</span>

<span class="kt">char</span> <span class="n">b1Anterior</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">char</span> <span class="nf">b1_bordaSubida</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b1: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000001000000000000000000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="n">B1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">b1Anterior</span><span class="p">;</span>
    <span class="n">b1Anterior</span> <span class="o">=</span> <span class="n">B1</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>
<span class="kt">char</span> <span class="nf">b1_bordaDescida</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b1: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000000000000000000010000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="o">!</span><span class="n">B1</span> <span class="o">&amp;&amp;</span> <span class="n">b1Anterior</span><span class="p">;</span>
    <span class="n">b1Anterior</span> <span class="o">=</span> <span class="n">B1</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>
<span class="kt">char</span> <span class="nf">b1_borda</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// b1: 000000000001111111111111100000000</span>
    <span class="c1">// ret:000000000001000000000000010000000</span>
    <span class="kt">char</span> <span class="n">aux</span><span class="p">;</span>
    <span class="n">aux</span> <span class="o">=</span> <span class="p">(</span><span class="n">B1</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">b1Anterior</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">B1</span> <span class="o">&amp;&amp;</span> <span class="n">b1Anterior</span><span class="p">);</span>
    <span class="n">b1Anterior</span> <span class="o">=</span> <span class="n">B1</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span> <span class="n">aux</span> <span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />

<p>Agora √© a sua vez!</p>

<p>Crie o seu projeto, copie o c√≥digo, execute-o, procure os erros, arrume-os, seja resiliente, leia novamente a explica√ß√£o, busque outras fontes, pergunte, responda, explique, fa√ßa altera√ß√µes conscientes no c√≥digo, explore, divirta-se.</p>

<p>Ficou com alguma d√∫vida, entre em contato.</p>

<p>Bom trabalho!</p>

<p><a href="/ddp/docs/tecnology/ucPIC">Voltar</a></p>
:ET