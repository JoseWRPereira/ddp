I"”d<h1 id="pisca-led">Pisca LED</h1>

<p>Uma pr√°tica costumeira em programa√ß√£o, sempre que se testa a compila√ß√£o em um projeto novo, √© exibir na tela a mensagem <em><code class="language-plaintext highlighter-rouge">"Hello world"</code></em> ou em portugu√™s <code class="language-plaintext highlighter-rouge">"Ola mundo"</code>. Tal pr√°tica ocorre pelo fato de que fazer a exibi√ß√£o de uma mensagem na sa√≠da padr√£o, que geralmente √© o monitor, ser o programa m√≠nimo funcional que se pode fazer em um programa de computador.</p>

<p>Em um sistema microcontrolado, o programa equivalente ao <code class="language-plaintext highlighter-rouge">"Ola mundo"</code> √© o acionamento intermitente de uma dispositivo de sinaliza√ß√£o em uma sa√≠da digital, ou seja, fazer um LED conectado a uma pino piscar: <code class="language-plaintext highlighter-rouge">Pisca LED</code>.</p>

<p>Assim, o <code class="language-plaintext highlighter-rouge">Pisca LED</code> ou <em><code class="language-plaintext highlighter-rouge">Blink LED</code></em> √© o programa m√≠nimo e ponto de partida no estudo dos sistemas microcontrolados, e de extrema import√¢ncia por testar a compila√ß√£o do programa (<em>firmware</em>), sua grava√ß√£o no dispositivo alvo e ao menos uma parte do circuito em sua execu√ß√£o, validando o processo de compila√ß√£o, grava√ß√£o e execu√ß√£o.</p>

<h2 id="objetivo">Objetivo</h2>

<p>Acionar um LED de forma intermitente com frequ√™ncia de 1Hz.</p>

<!--more-->

<h2 id="circuito-hardware">Circuito (<em>Hardware</em>)</h2>

<p>O dispositivo respons√°vel por acionar o LED √© o microcontrolador(uC), atrav√©s de um pino configurado como sa√≠da. Este pino pode estar fornecendo corrente como fonte (<em>source</em>) ao ramo ou drenando (<em>sink</em>) corrente dele.</p>

<p>As configura√ß√µes como fonte e dreno s√£o mostradas na Figura 1 respectivamente em (a) e (b).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1(a): Liga√ß√£o de pino como fonte (<em>source</em>)</th>
      <th style="text-align: center">Figura 1(b): Liga√ß√£o de pino como dreno (<em>sink</em>)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/P0101-piscaLEDsource.gif?raw=true" alt="circuito" /></td>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/P0101-piscaLEDsink.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>O pino do uC possui limita√ß√£o de corrente, que pode variar a depender do modelo ou fabricante.</p>

<p>O uC aqui utilizado, PIC16F887, possui <strong>corrente m√°xima de 25mA por pino</strong>, tanto como <strong>fonte</strong> quanto como <strong>dreno</strong>, conforme indica o seu <a href="http://ww1.microchip.com/downloads/en/devicedoc/41291d.pdf">datasheet</a> (se√ß√£o <em>17.0 Electrical especifications</em>, p√°gina 241).</p>

<p>Note que apesar de cada pino possuir uma corrente m√°xima, outra limita√ß√£o √© que a somat√≥ria dessas corrente n√£o pode ultrapassar <strong>200mA</strong> para o conjunto dos pinos do <strong>PORTA, PORTB e PORTE</strong>.
Bem como para o <strong>PORTC e PORTD</strong> tamb√©m limitado a <strong>200mA</strong>.</p>

<p>Como em ambas as ocasi√µes a corrente m√°xima √© a mesma, n√£o existe uma predile√ß√£o por uma configura√ß√£o de montagem ou outra. Tal predile√ß√£o ocorre quando a capacidade combinada de uma configura√ß√£o √© maior do que a outra, normalmente drenar corrente √© a condi√ß√£o mais comum.</p>

<p>Para o uC aqui abordado, ambas as formas de liga√ß√£o possuem as mesmas condi√ß√µes, n√£o havendo diferen√ßa em capacidade de condu√ß√£o para o pino como fonte ou dreno.</p>

<p>A vantagem de utilizar o pino como fonte √© trabalhar com uma l√≥gica direta, em que o estado l√≥gico 1(verdadeiro, +5V) produz o acionamento do LED, enquanto que na configura√ß√£o do pino como dreno a l√≥gica de acionamento √© invertida, pois o pino em estado l√≥gico 0(falso, 0V) produz o acionamento do LED.</p>

<h2 id="programa-firmware">Programa (<em>Firmware</em>)</h2>

<p>O programa em microcontrolador √© denominado <em>firmware</em>, assim como para computador √© denominado <em>software</em>.</p>

<p>Um √∫nico arquivo de c√≥digo fonte (<em>Source Files</em>) √© criado nesse projeto, como pode-se ver na Figura 2, denominado <code class="language-plaintext highlighter-rouge">main.c</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 2: √Årvore de diret√≥rio do projeto</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/projectTree.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>√â uma boa pr√°tica nomear o arquivo fonte com o nome <code class="language-plaintext highlighter-rouge">main.c</code> quando ele possuir a fun√ß√£o principal do programa, que possui o mesmo nome. Os demais arquivos fonte devem possuir nomes relacionados √†s fun√ß√µes que eles cont√©m.</p>

<p>Segue o c√≥digo fonte para o projeto Pisca LED.</p>

<pre><code class="language-C">/*
 * File:   main.c
 * Author: josewrpereira
 * 
 * Created on 21 de Setembro de 2019, 19:01
 * 
 * IDE:         MPLAB X IDE v3.15
 * Compiler:    XC8 v1.45
 * OS:          Deepin 15.11 X86_64
 * Kernel:      4.15.0-30deepin-generic
 * 
 * Objetivo: 
 *      Piscar o LED com intervalo de 500 ms
 * 
 * Pinos    |n¬∫     |Conex√£o
 *  VDD     |11,32  | Alimenta√ß√£o (Vcc/+5V)
 *  VSS     |12,31  | Alimenta√ß√£o (GND/0V)
 *  RD0     |19     | LED (source/sink)
 */


#include &lt;xc.h&gt;                 // Inclui biblioteca padr√£o do compilador XC8 
                                // para microcontroladores Microchip.

#pragma config FOSC  = INTRC_NOCLKOUT   // Fonte de clock: oscilador interno
#pragma config WDTE  = OFF      // Desabilita WatchDog Timer 
#pragma config MCLRE = OFF      // Desab. Master Clear via pino
#pragma config LVP   = OFF      // Desab. grava√ß√£o em baixa tens√£o

#define _XTAL_FREQ     4000000  // Freq. clock interno: 4MHz(padr√£o)

void main(void)                 // Fun√ß√£o principal = main.
{                               // In√≠cio do bloco da fun√ß√£o main.
    PORTDbits.RD0 = 0;          // Inicia RD0 com o valor 0.
    TRISDbits.TRISD0 = 0;       // Configura RD0 como Sa√≠da.
    
    while( 1 )                  // La√ßo de repeti√ß√£o infinito.
    {                           // Inicio do la√ßo de repeti√ß√£o.
        PORTDbits.RD0 = 1;      // Liga RD0.
        __delay_ms(500);        // Espera 500 ms.
        PORTDbits.RD0 = 0;      // Desliga RD0.
        __delay_ms(500);        // Espera 500 ms.
    }                           // Fim do la√ßo de repeti√ß√£o.
    return;                     // Caracteriza main como uma fun√ß√£o sem retorno.
}                               // Fim do bloco da fun√ß√£o main.

</code></pre>

<h2 id="estrutura-do-programa">Estrutura do programa</h2>

<p>O programa presente no arquivo fonte <code class="language-plaintext highlighter-rouge">main.c</code> possui o seguinte arranjo:</p>
<ul>
  <li>Coment√°rios;</li>
  <li>Inclus√£o de bibliotecas;</li>
  <li>Diretivas de compila√ß√£o;</li>
  <li>Defini√ß√µes √∫teis ao programa;</li>
  <li>Programa principal.</li>
</ul>

<h3 id="coment√°rios">Coment√°rios</h3>

<p>Os coment√°rios s√£o trechos do c√≥digo que n√£o s√£o compilados e servem para auxiliar na comprees√£o do c√≥digo.</p>

<p>Os coment√°rios s√£o importantes para evidenciar ou explicar trechos de c√≥digo que n√£o s√£o expl√≠citos, de forma a garantir uma boa compreens√£o para quem venha a estudar o c√≥digo, ou ainda evidenciar a identifica√ß√£o do projeto, do autor, informa√ß√µes de vers√£o de interfaces e  compiladores utilizados para criar o projeto, seu objetivo e um mapa simplificado de aloca√ß√£o de pinos, como usado no c√≥digo aqui apresentado.</p>

<p>Em linguagem C os coment√°tios podem ser feitos em <code class="language-plaintext highlighter-rouge">bloco</code> ou em <code class="language-plaintext highlighter-rouge">linha</code>:</p>

<ul>
  <li><strong>Bloco</strong>: tem como delimitador inicial <code class="language-plaintext highlighter-rouge">/*</code> e o final <code class="language-plaintext highlighter-rouge">*/</code>. Todo o conte√∫do entre os delimitadores n√£o s√£o considerados pelo compilador, sendo √∫teis apenas para os programadores.</li>
  <li><strong>Linha</strong>: a marca√ß√£o <code class="language-plaintext highlighter-rouge">//</code> indica que todo o conte√∫do √† direita at√© o fim da linha √© coment√°rio, e da mesma forma n√£o √© considerado pelo compilador.</li>
</ul>

<p>Uma das informa√ß√µes poss√≠veis para inserir nos coment√°rios e que considero ser √∫til √© mostrar quais pinos s√£o usados e em qual aplica√ß√£o, como um mapa de aloca√ß√£o de pinos, conforme segue:</p>

<pre><code class="language-C"> /*
 * Pinos    |n¬∫     |Conex√£o
 *  VDD     |11,32  | Alimenta√ß√£o (Vcc/+5V)
 *  VSS     |12,31  | Alimenta√ß√£o (GND/0V)
 *  RD0     |19     | LED (source/sink)
*/
</code></pre>

<h3 id="inclus√µes-de-bibliotecas">Inclus√µes de bibliotecas</h3>

<p>O c√≥digo <code class="language-plaintext highlighter-rouge">#include &lt;xc.h&gt;</code> inclui a biblioteca padr√£o do compilador XC8 para microcontroladores Microchip, de modo a oferecer fun√ß√µes b√°sicas e as defini√ß√µes ou nomenclaturas dos registradores.</p>

<p>Todas as defini√ß√µes como <code class="language-plaintext highlighter-rouge">PORTDbits.RD0</code>, <code class="language-plaintext highlighter-rouge">TRISDbits.TRISD0</code>, <code class="language-plaintext highlighter-rouge">FOSC</code>, <code class="language-plaintext highlighter-rouge">WDTE</code>, <code class="language-plaintext highlighter-rouge">__delay_ms()</code> est√£o declaradas ou <em>linkadas</em> em <code class="language-plaintext highlighter-rouge">xc.h</code>, assim sendo uma biblioteca obrigat√≥ria para nosso uso.</p>

<h3 id="configura√ß√µes-de-opera√ß√£o-do-uc">Configura√ß√µes de opera√ß√£o do uC</h3>

<p>Algumas diretivas de compila√ß√£o como <code class="language-plaintext highlighter-rouge">#pragma config</code> possibilitam o acesso a alguns perif√©ricos de forma exclusiva durante a grava√ß√£o do c√≥digo.</p>

<p>Existem diversas configura√ß√µes poss√≠veis, mas usaremos apenas as seguintes configura√ß√µes b√°sicas.</p>

<pre><code class="language-C">#pragma config FOSC  = INTRC_NOCLKOUT   // Fonte de clock: oscilador interno
#pragma config WDTE  = OFF              // Desabilita WatchDog Timer 
#pragma config MCLRE = OFF              // Desab. Master Clear via pino
#pragma config LVP   = OFF              // Desab. grava√ß√£o em baixa tens√£o
</code></pre>

<p>Tanto essas diretivas quanto as outras configura√ß√µes ser√£o apresentadas no devido momento.</p>

<p>Um destaque para a primeira linha em que o registrador <code class="language-plaintext highlighter-rouge">FOSC</code> √© configurado para o oscilador interno. Por uma quest√£o de simplifica√ß√£o de montagem inicial do circuito, optou-se por tal configura√ß√£o por n√£o necessitar de um cristal oscilador e seus capacitores conectados externamente junto aos pinos 13 e 14. A limita√ß√£o dessa escolha √© que a frequ√™ncia do oscilador interno atinge no m√°ximo 8MHz, enquanto que ao utilizar um cristal externo pode-se trabalhar com at√© 20MHz, e a toler√¢ncia de calibra√ß√£o do oscilador interno pode variar em fun√ß√£o da temperatura, o que n√£o afeta nossas aplica√ß√µes did√°ticas.</p>

<h3 id="defini√ß√µes">Defini√ß√µes</h3>

<p>A diretiva <code class="language-plaintext highlighter-rouge">#define</code>, como o pr√≥prio nome indica, define um ‚Äúapelido‚Äù para um valor. Esse apelido √© substituido pelo real valor antes da compila√ß√£o do c√≥digo pelo pr√©-processador, de modo que apenas faz sentido para o programador.</p>

<p>A grande vantagem √© que ao utilizar um valor muitas vezes durante o c√≥digo pode-se alter√°-lo falcilmente se ele possuir um <code class="language-plaintext highlighter-rouge">#define</code> associado. Suponha um c√≥digo que utiliza um valor constante em seus c√°lculos, e √© definido como <code class="language-plaintext highlighter-rouge">#define PI 3.14</code>. Dorante os c√°culos usa-se o ‚Äúapelido‚Äù <code class="language-plaintext highlighter-rouge">PI</code> (‚Ä¶ PI * raio ‚Ä¶ ), e ele aparece imuneras vezes no programa. Da√≠ voc√™ programador percebe que precisa aumentar a precis√£o dos c√°lculos, e esta aproxima√ß√£o com duas casas decimais n√£o √© mais suficiente, agora s√£o necess√°rias cinco casas decimais. Seria penoso demais procurar por todas as inser√ß√µes do PI no c√≥digo para mud√°-los um a um, al√©m do fato de ser muito provavel a inser√ß√£o de erros. Com o <code class="language-plaintext highlighter-rouge">#define</code> basta mudar na sua declara√ß√£o para <code class="language-plaintext highlighter-rouge">#define PI 3.14159</code>, que o pr√©-processador substitui em todos os lugares que foi utilizado o seu ‚Äúapelido‚Äù.</p>

<p>A defini√ß√£o <code class="language-plaintext highlighter-rouge">_XTAL_FREQ</code> deve assumir o valor do oscilador que estiver sendo utilizado na configura√ß√£o, neste caso, o oscilador interno com o valor padr√£o √© 4MHz.</p>

<pre><code class="language-C">#define _XTAL_FREQ     4000000
</code></pre>

<h3 id="programa-principal">Programa principal</h3>

<p>Todo programa em linguagem C deve possuir uma fun√ß√£o principal, cujo nome √© obrigat√≥rio <code class="language-plaintext highlighter-rouge">main</code>. 
As demais fun√ß√µes devem possuir nomes de acordo com a tarefa que executam, mas s√£o de total responsabilidade do programador.</p>

<p>Como no microcontrolador n√£o h√° um sistema operacional para invocar a execu√ß√£o do programa, a fun√ß√£o principal n√£o necessita de um retorno, bem como n√£o possui argumentos de entrada.</p>

<pre><code class="language-C">void main(void)
{                               // In√≠cio do bloco da fun√ß√£o main.

    return;                     // Caracteriza main como uma fun√ß√£o sem retorno.
}                               // Fim do bloco da fun√ß√£o main.
</code></pre>

<h3 id="parametrizar-habilitar-e-inicializar">Parametrizar, habilitar e inicializar</h3>

<p>A estrutura b√°sica do programa para o microcontrolador(<em>firmware</em>) consiste em dois blocos de c√≥digo, sendo o primeiro para a configura√ß√£o e o segundo para o programa.</p>

<p>O bloco de configura√ß√£o consiste em parametrizar, habilitar e/ou inicializar os perif√©ricos e dados utilizados no programa.</p>

<p>O bloco para o programa consiste no c√≥digo que normalmente √© executado de forma repetida enquanto o sistema estiver em execu√ß√£o, ou seja, enquanto o microcontrolador estiver ligado.</p>

<p>O programa aqui apresentado utiliza o pino D0 do PORTD do microcontrolador por ser o PORT mais f√°cil de trabalhar.</p>

<div class="alert alert-primary" role="alert">
<h4 class="alert-heading">Como esse pino √© parametrizado, habilitado e inicializado?</h4>

</div>

<div class="alert alert-primary" role="alert">
<h4 class="alert-heading">Como configurar o pino como sa√≠da?</h4>

</div>

<h4 id="registradores">Registradores</h4>

<p>Todos os pinos possuem ao menos um circuito espec√≠fico a eles conectados para realizar as fun√ß√µes as quais foram planejadas, entre elas, entrada digital, sa√≠da digital, contadores, comunica√ß√£o, leitura de sinal anal√≥gico, etc.</p>

<p>Todos os perif√©ricos, como circuitos, s√£o configurados por sinais el√©tricos em portas espec√≠ficas, e tais sinais podem ser acessados atrav√©s do mapeamento desses sinais em um conjunto de registradores espec√≠fico denominados <strong>Registradores de Fun√ß√µes Especiais</strong> (<em>SFR - Special Function Register</em>).</p>

<p>A Figura 3 mostra o mapa de registradores do PIC16F887 e pode ser acessada na p√°gina 25 do seu <a href="http://ww1.microchip.com/downloads/en/devicedoc/41291d.pdf"><em>datasheet</em></a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 3: Mapa dos Registradores de Fun√ß√µes Especiais (<em>SFR</em>)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/sfr-PIC16F886-7.png?raw=true" alt="SFR     " /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887</td>
    </tr>
  </tbody>
</table>

<p>Em destaque est√£o os registradores <code class="language-plaintext highlighter-rouge">PORTD</code> e <code class="language-plaintext highlighter-rouge">TRISD</code>, que s√£o os respons√°veis pela configura√ß√£o e manipula√ß√£o dos pinos conectados ao PORTD, inclusive o pino <code class="language-plaintext highlighter-rouge">D0</code> em que est√° conectado o ramo do circuito com o LED.</p>

<p>A Figura 4 mostra a representa√ß√£o do registrador PORTD utilizado para ler ou escrever um n√≠vel l√≥gico no pino 19 ou RD0 do microcontrolador.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 4: Registrador PORTD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/portdreg.png?raw=true" alt="PORTDreg" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887</td>
    </tr>
  </tbody>
</table>

<p>O PORTD possui 8 bits acess√≠veis individualmente e independentes, como indicado pelo <code class="language-plaintext highlighter-rouge">R/W</code> acima do nome de cada bit. 
O <code class="language-plaintext highlighter-rouge">-x</code> significa que o valor de <em>reset</em> √© desconecido, podendo ser 0 ou 1, mas n√£ √© poss√≠vel afirmar qual valor que estar√° cada bit ao ligar ou religar o microcontrolador.</p>

<p>Ao <em>setar</em> qualquer um dos bits do registrador com a instru√ß√£o <code class="language-plaintext highlighter-rouge">PORTDbits.RDn = 1;</code> sendo <code class="language-plaintext highlighter-rouge">n</code> o n√∫mero do bit que se est√° manipilando, o respectivo pino assume a tens√£o de alimenta√ß√£o do chip, +5V.</p>

<p>Ao <em>resetar</em> qualquer um dos bits do registrador com a instru√ß√£o <code class="language-plaintext highlighter-rouge">PORTDbits.RDn = 0;</code> sendo <code class="language-plaintext highlighter-rouge">n</code> o n√∫mero do bit que se est√° manipilando, o respectivo pino assume o valor de 0V.</p>

<p>Para realizar a leitura do pino, pode-se utilizar o seguinte comando: <code class="language-plaintext highlighter-rouge">var = PORTDbits.RDn;</code>, sendo <code class="language-plaintext highlighter-rouge">n</code> o n√∫mero do bit acessado e <code class="language-plaintext highlighter-rouge">var</code> a vari√°vel que recebe o estado do pino acessado.</p>

<p>Os dois estados l√≥gicos s√£o representados com os valores booleanos 0 e 1 e tais estados s√£o assumidos quando a tens√£o no pino est√° dentro de um determinado intervalo de tensao:</p>
<ul>
  <li>2,0V &lt; N√≠vel L√≥gico Alto &lt; 5.0V</li>
  <li>0,0V &lt; N√≠vel L√≥gico Baixo &lt; 0,8V</li>
</ul>

<p>Note que para o intervalo entre 0,8 e 2,0, n√£o h√° um estado bem definido, assim n√£o √© poss√≠vel garantir para qual estado l√≥gico ser√° interpretada a leitura do pino.</p>

<p>A Figura 5 mostra a representa√ß√£o do registrador TRISD utilizado para configura o pino como entrada ou sa√≠da de dados no pino 19 ou RD0 do microcontrolador.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 5: Registrador TRISD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/trisdreg.png?raw=true" alt="TRISDreg" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 p√°g. 57</td>
    </tr>
  </tbody>
</table>

<p>O TRISD possui 8 bits acess√≠veis individualmente e independentes, como indicado pelo <code class="language-plaintext highlighter-rouge">R/W</code> acima do nome de cada bit. 
O <code class="language-plaintext highlighter-rouge">-1</code> significa que o valor de <em>reset</em> √© <code class="language-plaintext highlighter-rouge">1</code>, ou seja, todos os pinos s√£o inicializados como entrada.</p>

<p>Um pino do PORTD pode ser configurado como entrada de dados com a seguinte instru√ß√£o: <code class="language-plaintext highlighter-rouge">TRISDbits.TRISDn = 1;</code>, onde <code class="language-plaintext highlighter-rouge">n</code> √© o n√∫mero do bit que est√° se configurando.</p>

<p>Para a configura√ß√£o do pino como sa√≠da pode-se utilizar o seguinte comando: <code class="language-plaintext highlighter-rouge">TRISDbits.TRISDn = 0;</code>.</p>

<p>Tais registradores s√£o um mapeamento do circuito da Figura 6, conforme segue.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 6: Diagrama dos pinos RD&lt;4:0&gt;</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/portD4-0_diagrama.png?raw=true" alt="DiagramaRD0-4" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 p√°g. 58</td>
    </tr>
  </tbody>
</table>

<p>Note que as a√ß√µes de escrita e leitura de determinados registradores produz um sinal de controle no circuito do respectivo pino. O terminal <code class="language-plaintext highlighter-rouge">WR PORTD</code> √© acionado quando a a√ß√£o de escrita no PORTD ocorre. O mesmo ocorre para <code class="language-plaintext highlighter-rouge">WR TRISD</code>. Para a a√ß√£o de leitura do registrador, √© gerado um sinal de acionamento em <code class="language-plaintext highlighter-rouge">RD TRISD</code> ou <code class="language-plaintext highlighter-rouge">RD PORTD</code>, respectivamente.</p>

<p>Os comandos de escrita acionam biest√°veis (<em>flip-flops</em>) para armazenar a configura√ß√£o ou o √∫ltimo dado escrito no pino. Para a leitura h√° apenas <em>buffers</em> de acesso ao dado do pino mediante os sinais de controle.</p>

<p>As instru√ß√µes de inicializa√ß√£o e configura√ß√£o s√£o apresentados abaixo e cada linha est√° ilustrada nas Figuras 7 e 8 em seguida:</p>

<pre><code class="language-C">    PORTDbits.RD0 = 0;          // Inicia RD0 com o valor 0.
    TRISDbits.TRISD0 = 0;       // Configura RD0 como Sa√≠da.
</code></pre>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 7: Inicializa√ß√£o do pino RD0-4</th>
      <th style="text-align: center">Figura 8: Configura√ß√£o do RD0-4 como sa√≠da</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/portD0_0.png?raw=true" alt="PORTD0-0" /></td>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0101/trisd0_0.png?raw=true" alt="TRISD0-0" /></td>
    </tr>
    <tr>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 p√°g. 58</td>
      <td style="text-align: center">Fonte: <em>Datasheet</em> do PIC16F887 p√°g. 58</td>
    </tr>
  </tbody>
</table>

<h3 id="ao-infinito-e-al√©m">Ao infinito e al√©m</h3>
<p>A condi√ß√£o mais comum √© que o programa fique sendo executado de forma repetida durante todo o per√≠odo em que o microcontrolador estiver ligado, assim utiliza-se um la√ßo de repeti√ß√£o com uma condi√ß√£o que √© verdadeira sempre.</p>

<pre><code class="language-C">    while( 1 )                  // La√ßo de repeti√ß√£o infinito.
    {                           // Inicio do la√ßo de repeti√ß√£o.
    }                           // Fim do la√ßo de repeti√ß√£o.
</code></pre>

<p>Note que em linguagem C, para uma vari√°vel num√©rica, todo valor diferente de zero possui o estado l√≥gico 1 (verdadeiro), enquanto que apenas o zero possui o estado l√≥gico 0 (falso).</p>

<p>Ap√≥s a configura√ß√£o do pino, sua inicializa√ß√£o, dentro do loop infinito a sequ√™ncia de passos que atende o objetivo proposto.</p>

<ol>
  <li>Acionar RD0, ligando o LED;</li>
  <li>Produzir um atraso de 500ms;</li>
  <li>Desacionar RD0, desligando o LED;</li>
  <li>Produzir um atraso de 500ms.</li>
</ol>

<p>Codificando esses passos temos:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>      <span class="c1">// Liga RD0.</span>
        <span class="n">__delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>        <span class="c1">// Espera 500 ms.</span>
        <span class="n">PORTDbits</span><span class="p">.</span><span class="n">RD0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// Desliga RD0.</span>
        <span class="n">__delay_ms</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>        <span class="c1">// Espera 500 ms.</span>
</code></pre></div></div>

<p>Os quatro passos completam o ciclo de acionamento do LED, e ent√£o este ciclo se repete em fun√ß√£o do la√ßo a qual ele est√° inserido.</p>

<p>Garantindo assim a correta execu√ß√£o e atendendo ao objetivo inicial de acionar o LED de forma intermitente com frequ·∫Ωncia de 1Hz, ou seja, 500ms ligado e o mesmo tempo desligado.</p>

<p><a href="/ddp/docs/tecnology/ucPIC">Voltar</a></p>
:ET