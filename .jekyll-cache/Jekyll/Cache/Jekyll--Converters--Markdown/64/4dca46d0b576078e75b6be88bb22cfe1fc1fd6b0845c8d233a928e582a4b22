I"ÁR<h1 id="display-de-7-segmentos">Display de 7 segmentos</h1>

<p>O display de 7 segmentos √© uma das formas mais comuns de exibir um n√∫mero, que pode representar o ‚Äúpeso‚Äù (massa) em uma balan√ßa, horas, minutos e segundos em um rel√≥gio ou cron√¥metro ou um simples contador de objetos em um processo qualquer.</p>

<h2 id="objetivo">Objetivo</h2>

<p>Acionar um display de 7 segmentos para exibir os 16 d√≠gitos hexadecimais:</p>

<p><code class="language-plaintext highlighter-rouge">0,1,2,3,4,5,6,7,8,9,A,B,C,D,E e F</code>;</p>

<!--more-->

<h2 id="1-circuito-hardware">1. Circuito (<em>Hardware</em>)</h2>

<p>O display de 7 segmentos basicamente √© um conjunto de LEDs dispostos de forma a cada um deles iluminar um segmento no encapsulamento. Existem v√°rios modelos para diferentes necessidades, mas aqui usamos o mais comum.</p>

<p>O display, al√©m dos sete segmentos possui ainda um ponto, que pode ser utilizado para sinalizar um ponto decimal (v√≠rgula) ao associar v√°rios displays para mostrar um n√∫mero fracion√°rio ou qualquer separa√ß√£o entre dois d√≠gitos. Nesse projeto o ponto n√£o ser√° utilzado.</p>

<p>Para o acionamento do display foi utilizado o <code class="language-plaintext highlighter-rouge">PORTD</code> conforme mostrado na Figura 1.1.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.1: Display de 7 segmentos catodo comum</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/P0110-disp7seg0-F.gif?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Existem dois modelos de display, <code class="language-plaintext highlighter-rouge">Anodo comum</code> e <code class="language-plaintext highlighter-rouge">Catodo comum</code>, que se referem aos terminais conectados em comum, conforme exemplo da Figura 1.2.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.2: Segmentos do display</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/disp7seg-segmentos.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Cada segmento recebe uma identifica√ß√£o em letra min√∫scula de <code class="language-plaintext highlighter-rouge">a</code> a <code class="language-plaintext highlighter-rouge">g</code> e o <code class="language-plaintext highlighter-rouge">p</code>. 
O display possui um terminal para cada segmento do display.</p>

<p>Cada pino do <code class="language-plaintext highlighter-rouge">PORTD</code> est√° conectado a um segmento do display.</p>

<p>Note que cada segmento, composto por um LED, necessita de um resistor para limitar a corrente que percorre ele. Como cada pino do uC fornece uma tens√£o de 5V para acionar o segmento. A queda de tens√£o no LED √© de \(2V\), aproximadamente. Pode-se assim calcular o valor do resistor limitador de corrente:</p>

<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mrow><msub><mi>V</mi><mrow><mi>p</mi><mi>i</mi><mi>n</mi><mi>o</mi></mrow></msub><mo>‚àí</mo><msub><mi>V</mi><mrow><mi>L</mi><mi>E</mi><mi>D</mi></mrow></msub></mrow><msub><mi>I</mi><mrow><mi>L</mi><mi>E</mi><mi>D</mi></mrow></msub></mfrac><mo>=</mo><mfrac><mrow><mn>5</mn><mo>‚àí</mo><mn>2</mn></mrow><mrow><mn>0</mn><mo separator="true">,</mo><mn>020</mn></mrow></mfrac><mo>=</mo><mn>150</mn><mi mathvariant="normal">Œ©</mi></mrow><annotation encoding="application/x-tex">R = \frac{ V_{pino}-V_{LED}}{I_{LED}} = \frac{5-2}{0,020} = 150\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">‚àí</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">2</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">‚àí</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">0</span><span class="mord">Œ©</span></span></span></span></span>

<p>O circuito apresenta um conjunto de resistores em um mesmo encapsulamento, mas poderia ser um resistor individual para cada segmento.</p>

<p>O display aqui utilizado √© do tipo catodo comum, assim basta acionar o pino do <code class="language-plaintext highlighter-rouge">PORTD</code> que corresponda ao segmento a ser acionado para formar o d√≠gito que se deseja exibir.</p>

<p>Para mostrar o d√≠gito 0(zero), aciona-se os segmento <code class="language-plaintext highlighter-rouge">a, b, c, d, e, f</code>conforme mostrado na Figura 1.3.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.3: D√≠gito 0 (zero)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/disp7seg-digito0.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>√â importante notar a sequ√™ncia de pinos do display e do <code class="language-plaintext highlighter-rouge">PORT</code> utilizado, pois uma altera√ß√£o de ordem muda o que √© exibido no display.</p>

<p>Para o d√≠gito 1(um) √© necess√°rio ligar apenas os segmentos <code class="language-plaintext highlighter-rouge">b</code> e <code class="language-plaintext highlighter-rouge">c</code>, mantendo os demais desligados.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.4: D√≠gito 1 (um)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/disp7seg-digito1.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Para o d√≠gito 2(dois) √© mais f√°cil perceber os d√≠gitos desligados, pois est√£o em menor quantidade, sendo o <code class="language-plaintext highlighter-rouge">c</code> e o <code class="language-plaintext highlighter-rouge">f</code> desligados e os demais ligados (exceto o ponto como j√° foi citado).</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.5: D√≠gito 2 (um)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/disp7seg-digito2.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>A Figura 1.6 mostra uma tabela com todos os d√≠gitos decimais e as correspond√™ncias em hexadecimal, para carregar no <code class="language-plaintext highlighter-rouge">PORTD</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 1.6: D√≠gitos e equival√™ncia em hexadecimal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/disp7seg-digitos.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<p>Est√£o faltando os dados dos d√≠gitos que completam o conjunto hexadecimal, que podem te servir como exerc√≠cios. Bom trabalho!</p>

<h2 id="2-programa-firmware">2. Programa (<em>Firmware</em>)</h2>

<p>O programa pode ser escrito todo em um √∫nico arquivo, <code class="language-plaintext highlighter-rouge">main.c</code>, mas √© um modo inconveniente pois dificulta a manute√ß√£o e a organiza√ß√£o do c√≥digo. Assim, cada arquivo <code class="language-plaintext highlighter-rouge">.c</code> deve possuir somente fun√ß√µes correlatas ao nome desse arquivo. Por exemplo: todas as fun√ß√µes de manipula√ß√£o do display de 7 segmentos est√£o contidas em <code class="language-plaintext highlighter-rouge">disp7seg.c</code>.</p>

<p>Para poder executar as fun√ß√µes do display no programa principal √© necess√°rio incluir o cabe√ßalho delas que est√° contido em<code class="language-plaintext highlighter-rouge">#include "disp7seg.h"</code>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Figura 2: √Årvore de diret√≥rio do projeto</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://github.com/JoseWRPereira/ddp/blob/master//_posts/tUcPIC/imgP0110/projectTree.jpg?raw=true" alt="circuito" /></td>
    </tr>
  </tbody>
</table>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 * File:   main.c
 * Author: josewrpereira
 *
 * Created on 5 de Agosto de 2020, 20:21:59
 * 
 * -------------------------------------------------
 *          MAPA DE ENTRADAS E SAIDAS
 * -------------------------------------------------
 *  Pinos   |n¬∫     |Conex√£o
 * ---------|-------|-------------------------------
 *  RD0     |19     | Segmento a
 *  RD1     |20     | Segmento b
 *  RD2     |21     | Segmento c
 *  RD3     |22     | Segmento d
 *  RD4     |27     | Segmento e
 *  RD5     |28     | Segmento f
 *  RD6     |29     | Segmento g
 *  RD7     |30     | Segmento p
 * -------------------------------------------------
 */</span>

<span class="cp">#include &lt;xc.h&gt;
#include "config.h"
#include "delay.h"
#include "disp7seg.h"
</span>
<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">cont</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="n">disp7seg_init</span><span class="p">();</span>
    
    <span class="k">while</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">disp7seg</span><span class="p">(</span> <span class="n">cont</span> <span class="p">);</span>
        <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
        <span class="n">cont</span> <span class="o">=</span> <span class="o">++</span><span class="n">cont</span> <span class="o">%</span> <span class="mi">16</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
#include "delay.h"
</span>
<span class="kt">char</span> <span class="n">digitos7seg</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>    <span class="mh">0x3F</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x4F</span><span class="p">,</span> 
                            <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x6D</span><span class="p">,</span> <span class="mh">0x7D</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> 
                            <span class="mh">0x7F</span><span class="p">,</span> <span class="mh">0x6F</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x7C</span><span class="p">,</span> 
                            <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span> <span class="mh">0x71</span>  <span class="p">};</span>

<span class="kt">void</span> <span class="nf">disp7seg_init</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">TRISD</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>

    <span class="n">PORTD</span> <span class="o">=</span> <span class="mh">0xFF</span><span class="p">;</span>    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
    <span class="n">PORTD</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
    <span class="n">PORTD</span> <span class="o">=</span> <span class="mh">0xFF</span><span class="p">;</span>    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
    <span class="n">PORTD</span> <span class="o">=</span> <span class="mh">0x00</span><span class="p">;</span>    <span class="n">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">disp7seg</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">num</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="n">PORTD</span> <span class="o">=</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">?</span> <span class="n">digitos7seg</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef DISP7SEG_H
#define	DISP7SEG_H
</span>
<span class="kt">void</span> <span class="nf">disp7seg_init</span><span class="p">(</span> <span class="kt">void</span> <span class="p">);</span>
<span class="kt">void</span> <span class="nf">disp7seg</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">num</span> <span class="p">);</span>

<span class="cp">#endif
</span></code></pre></div></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;xc.h&gt;
#include "config.h"
</span>
<span class="kt">void</span> <span class="nf">delay</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">t</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span><span class="p">(</span> <span class="n">t</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">__delay_ms</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="o">--</span><span class="n">t</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef DELAY_H
#define DELAY_H
</span>
<span class="kt">void</span> <span class="nf">delay</span><span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">t</span> <span class="p">);</span>

<span class="cp">#endif
</span></code></pre></div></div>

<h2 id="estrutura-do-programa">Estrutura do programa</h2>

<p>O programa presente no arquivo fonte <code class="language-plaintext highlighter-rouge">main.c</code> possui o seguinte arranjo:</p>
<ul>
  <li></li>
  <li></li>
  <li>Programa principal.</li>
</ul>

<hr />

<p>Agora √© a sua vez!</p>

<p>Crie o seu projeto, copie o c√≥digo, execute-o, procure os erros, arrume-os, seja resiliente, leia novamente a explica√ß√£o, busque outras fontes, pergunte, responda, explique, fa√ßa altera√ß√µes conscientes no c√≥digo, explore, divirta-se.</p>

<p>Ficou com alguma d√∫vida, entre em contato.</p>

<p>Bom trabalho!</p>

<p><a href="/ddp/docs/tecnology/ucPIC">Voltar</a></p>
:ET