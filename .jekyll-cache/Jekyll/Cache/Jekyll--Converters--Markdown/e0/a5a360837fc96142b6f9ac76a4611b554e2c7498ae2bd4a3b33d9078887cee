I"2O<h1 id="extremamente-básico"><a href="https://www.urionlinejudge.com.br/judge/pt/problems/view/1001">Extremamente Básico</a></h1>

<p>O desafio inicial solicita que o programa faça a leitura de dois valores do tipo inteiro, some-os, e exiba uma mensagem com esse resultado.</p>

<p>O título do desafio reflete a ideia de estrutura de um programa, pois a sua resolução é composta apenas pelas ações básicas: ler, processar e exibir, independente da linguagem que se utilize. O que pode diferir entre as linguagens é a necessidade de que as ações estejam dentro de uma função ou não.</p>

<p>Para a resolução então é necessário responder três perguntas:</p>
<ul>
  <li>Qual é a estrutura básica do programa?</li>
  <li>Como ler um dado do tipo inteiro?</li>
  <li>Como realizar operações algébricas básicas?</li>
  <li>Como exibir um dado do tipo inteiro?</li>
</ul>

<!--more-->

<p>Detalhamento das resoluções para as respectivas linguagens: <a href="/ddp/2020/uri1001/#c">C</a> e <a href="/ddp/2020/uri1001/#python">Python</a>.</p>

<div class="alert alert-success" role="alert">
<h4 class="alert-heading">C</h4>

</div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">xis</span><span class="p">;</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">A</span> <span class="p">);</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">B</span> <span class="p">);</span>
  <span class="n">xis</span> <span class="o">=</span> <span class="n">A</span> <span class="o">+</span> <span class="n">B</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"X = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">xis</span> <span class="p">);</span>
  <span class="k">return</span><span class="p">(</span> <span class="mi">0</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="alert alert-primary" role="alert">
<h4 class="alert-heading">Python</h4>

</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="nb">input</span><span class="p">()</span> <span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="nb">input</span><span class="p">()</span> <span class="p">)</span>
<span class="n">soma</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
<span class="k">print</span><span class="p">(</span><span class="s">"X = {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span> <span class="n">soma</span> <span class="p">)</span> <span class="p">)</span>
</code></pre></div></div>

<h1 id="c">C</h1>

<h2 id="estrutura-básica-de-um-programa-em-c">Estrutura básica de um programa em C</h2>

<p>Todo programa em linguagem C é estruturado em <strong>funções</strong>.</p>

<h2 id="função">Função</h2>

<p>Uma <strong>função</strong> é um <strong>conjunto de instruções</strong>, <strong>ordenadas de forma lógica</strong>, de modo a <strong>atender um objetivo</strong>.</p>

<p>Uma função pode ter argumentos, que são variáveis que recebem dados a serem processados.</p>

<p>Uma função tem um parâmetro de retorno, que é uma variável com o conteúdo resultante do processo executado.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">tipo</span> <span class="n">retorno</span><span class="o">&gt;</span> <span class="n">nome_da_funcao</span><span class="p">(</span> <span class="o">&lt;</span><span class="n">argumentos</span><span class="o">:</span> <span class="n">tipo</span> <span class="n">parametro</span><span class="p">,</span> <span class="n">tipo</span> <span class="n">parametro</span><span class="p">,</span> <span class="p">...</span><span class="o">&gt;</span> <span class="p">)</span>
<span class="p">{</span>
  
  <span class="c1">// Conjunto de instruções</span>
  <span class="c1">// ordenadas logicamente</span>
  <span class="c1">// para atender o objetivo</span>

  <span class="k">return</span><span class="p">(</span> <span class="o">&lt;</span><span class="n">retorno</span><span class="o">&gt;</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As chaves <code class="language-plaintext highlighter-rouge">{</code> e <code class="language-plaintext highlighter-rouge">}</code> indicam o início e o fim de um bloco de código, são delimitadores de um trecho de código que estão unidos por uma condição ou função.</p>

<h2 id="tipo-de-dados">Tipo de dados</h2>

<p>Um dado em computação é um número que é armazenado em um espaço de memória. O tamanho e o formato desse armazenamento definem o tipo de dado.</p>

<p>Os dados mais comuns em linguagem C são denominados <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">char</code>, <code class="language-plaintext highlighter-rouge">float</code> e <code class="language-plaintext highlighter-rouge">double</code>.</p>

<p>A unidade básica desses dados é o <strong>bit</strong>. 
O agrupamento de <strong>8 bits</strong> é um <strong>byte</strong>.</p>

<p>Em grande parte dos processadores, ao agrupar <strong>4 bytes</strong>, tem-se uma variável do tipo <strong>int</strong>.</p>

<p>Mais detalhes podem ser encontrados em <a href="https://pt.wikibooks.org/wiki/Programar_em_C/Tipos_de_dados">wikibooks - Linguagem C</a>.</p>

<p>Quando uma função não possui argumentos, pode-se deixar os parênteses sem declaração alguma ou utilizar a palavra reservada <code class="language-plaintext highlighter-rouge">void</code>, que indica que não há parâmetro alí, ou que é vazio.</p>

<h2 id="main">Main</h2>

<p>Todo programa em linguagem C deve possuir uma função principal, que obrigatoriamente é declarada como <code class="language-plaintext highlighter-rouge">main()</code>, que denota o início da execução do programa. As demais funções são executadas a partir da função principal, sendo o programador responsável pelo seu nome, mas aconselha-se que faça sentido em relação ao seu objetivo.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>

  <span class="k">return</span><span class="p">(</span> <span class="mi">0</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>O programa principal aqui declarado não possui argumentos, assim declarado como <code class="language-plaintext highlighter-rouge">void</code>. 
Tipicamente um programa em linguagem C é executado a partir de outro programa, geralmente de um sistema operacional. Ao final da execução o sistema operacional deve receber um dado indicando o <strong>status</strong> da execução, ou seja, se houve algum erro por exemplo. O valor de retorno 0(zero) indica que a execução ocorreu sem problemas.</p>

<h2 id="periféricos">Periféricos</h2>

<p>A execução do programa basicamente é realizada através do processador que lê dados nas memórias e manipula-os de acordo com a sequência de instruções do programa, que é armazenada em uma dessas memórias.</p>

<p>Assim, tudo é leitura, manipulação e escrita de dados. A manipulação de dados envolve operações lógicas, aritméticas e de movimentação de dados.</p>

<p>Para que um programa possa interagir com um periférico como a tela, o teclado, o mouse, a impressora, a câmera ou qualquer outro, é necessário que esse periférico esteja mapeado em uma região de memória, ou seja, um espaço de memória é reservado para configurar, parametrizar e trocar dados com o periférico.</p>

<p>Ao inserir um dispositivo novo ao sistema, um novo espaço da memória é mapeado, ou seja, atribuido para a operação desse dispositivo. Alguns dispositivos são denominados de padrão, todo computador tem uma entrada padrão e uma saída padrão, que é o teclado e o monitor, respectivamente.</p>

<p>Para manipular dados nesses dispositivos padrão, é necessário incluir funções existentes na instalação do compilador no sistema operacional.
Essas funções estão presentes na biblioteca <code class="language-plaintext highlighter-rouge">stdio.h</code>: Entradas e Saídas Padrão (<strong>St</strong>an<strong>d</strong>ard <strong>I</strong>nput <strong>O</strong>utput).</p>

<h2 id="stdioh"><a href="http://www.cplusplus.com/reference/cstdio/">stdio.h</a></h2>

<p>Para incluir uma biblioteca utiliza-se a diretiva <code class="language-plaintext highlighter-rouge">#include</code>, e entre os símbolos <code class="language-plaintext highlighter-rouge">&lt;</code> e <code class="language-plaintext highlighter-rouge">&gt;</code> o nome da bilioteca contida na instalação do compilador, que deve possuir uma extensão <code class="language-plaintext highlighter-rouge">.h</code> para indicar que é o seu cabeçalho (<a href="https://www.w3schools.in/c-tutorial/c-header-files/"><em>header</em></a>).</p>

<p>Os arquivos de inclusão não são os arquivos fonte, mas sim os arquivos de cabeçalho, que possuem as informações necessárias para a chamada das funções presentes nessa biblioteca.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">void</span> <span class="p">)</span>
<span class="p">{</span>

  <span class="k">return</span><span class="p">(</span> <span class="mi">0</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="leitura-e-escrita-de-dados"><a href="https://www.w3schools.in/c-tutorial/input-output/">Leitura e escrita de dados</a></h2>

<p>A leitura de dados é feita utilizando a função <code class="language-plaintext highlighter-rouge">scanf()</code> e a escrita utilizando a função <code class="language-plaintext highlighter-rouge">printf()</code>, sendo que ambas utilizam uma quantidade variável de argumentos, mas seu primeiro argumento é um formato de caracteres.</p>

<h2 id="o-formato"><a href="https://www.w3schools.in/c-tutorial/format-specifiers/">O formato</a></h2>

<p>Basicamente se trata de uma <a href="https://www.w3schools.in/c-tutorial/strings/">cadeia de caracteres</a> (<em>string</em>) que possui uma mensagem a ser enviada à saída padrão, ou como devem ser lidos da entrada padrão.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"Mensagem de exibicao"</span>
</code></pre></div></div>
<p>Podendo ser incluida a indicação de variável na posição que ela deve aparecer utilizando o <code class="language-plaintext highlighter-rouge">%</code> e o seu tipo.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"Exibe a variavel %d "</span>
</code></pre></div></div>
<p>Após o formato são incluidas as variáveis que substituem as marcações na string, na ordem em que elas aparecem.</p>

<h2 id="scanf"><a href="https://en.cppreference.com/w/c/io/fscanf">scanf()</a></h2>

<p>Leitura de um dado que é armazenado na <a href="https://www.w3schools.in/c-tutorial/variables/">variável</a> num.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num</span> <span class="p">);</span>
</code></pre></div></div>
<p>Leitura de dois dados que são armazenado nas variáveis A e B.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">;</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">A</span> <span class="p">);</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">B</span> <span class="p">);</span>
</code></pre></div></div>

<p>Ou ainda:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">;</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">B</span> <span class="p">);</span>
</code></pre></div></div>

<p>Os argumentos seguintes ao formato devem ser os <strong>endereços das variáveis</strong> que vão receber os dados lidos da entrada padrão conforme o formato do primeiro argumento.</p>

<h2 id="print"><a href="https://en.cppreference.com/w/c/io/fprintf">print()</a></h2>

<p>Exibição de dados da variável soma.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"X = %d"</span><span class="p">,</span> <span class="n">soma</span> <span class="p">);</span>
</code></pre></div></div>
<p>No lugar da marcação <code class="language-plaintext highlighter-rouge">%d</code> deve ser inserido o conteúdo da variável soma.</p>

<p>Todo apresentação de dados na plataforma URI devem possuir um fim de linha, denotado pelo caractere <code class="language-plaintext highlighter-rouge">\n</code>, equivalente à tecla Enter.</p>

<h1 id="python">Python</h1>

<p>Utilizando a linguagem Python, a estrutura do programa é bem simplificada se comparada à linguagem C, não necessitando declarar a função <code class="language-plaintext highlighter-rouge">main</code>, e no caso desse desafio inicial, nenhum função é necessária ser declarada, sendo que a execução do programa se dá pelo início do código.</p>

<p>Python possui alocação dinâmica da memória, ou seja, uma variável pode ser declarada a qualquer momento que ela for utilizada pela primeira vez. O dado que for inserido nela é o que define o tipo de dado. Tudo feito dinamicamente pelo interpretador da linguagem.</p>

<p>Apesar dessas diferenças, as etapas básicas são as mesmas: leitura, processamento e exibição.</p>

<h2 id="leitura-de-dados">Leitura de dados</h2>
<p>Com uma busca rápida no Google, encontrei o a resposta para a leitura de dados em <a href="https://www.w3schools.com/python/ref_func_input.asp?_blank">w3schools.com</a>.</p>

<h3 id="input">input()</h3>
<p>A função <code class="language-plaintext highlighter-rouge">input()</code> realiza a leitura de uma cadeia de caracteres (string) da entrada padrão (teclado). O resultado lido é atribuído a variável <em>a</em>, <code class="language-plaintext highlighter-rouge">a = input()</code>. O tipo da variável é definida dinamicamente, ou seja, no momento que é feita a atribuição do dado, este é reconhecido e a variável é declarada com esse mesmo tipo, nesse caso, string.</p>

<p>Mas é necessário que, após as leituras dos dois valores, seja feita a soma, ou seja, as entradas devem ser números e não cadeias de caracteres (string).</p>

<p><strong>Como converter a string lida em um número do tipo inteiro?</strong></p>

<h3 id="casting">Casting</h3>
<p>O processo para a conversão entre tipos de dados é chamado de
<a href="https://www.w3schools.com/python/python_casting.asp?_blank">casting</a>, onde um dado sofre uma <a href="https://translate.google.com.br/?hl=pt-BR#view=home&amp;op=translate&amp;sl=en&amp;tl=pt&amp;text=casting">modelagem</a> do seu tipo original para o tipo desejado.</p>

<p>Assim, a entrada de dados é feita pela função <code class="language-plaintext highlighter-rouge">input()</code>, cujo resultado é modelado para o tipo inteiro e por fim atribuído a variável <code class="language-plaintext highlighter-rouge">a</code>.
O mesmo ocorre para a variável <code class="language-plaintext highlighter-rouge">b</code>. Em seguida a variável <code class="language-plaintext highlighter-rouge">soma</code> recebe o resultado da operação de <a href="https://www.w3schools.com/python/python_operators.asp?_blank">soma</a> entre elas.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="nb">input</span><span class="p">()</span> <span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span> <span class="nb">input</span><span class="p">()</span> <span class="p">)</span>
<span class="n">soma</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

<h2 id="print-1">print()</h2>
<p>Por fim a apresentação do resultado, que pode ser feita utilizando a função <code class="language-plaintext highlighter-rouge">print()</code>, mas como inserir uma variável no meio da string?</p>

<h2 id="presentation-error">Presentation Error</h2>
<p>Uma primeira forma encontrada foi <code class="language-plaintext highlighter-rouge">print("X = ", soma )</code>, porém a plataforma avaliava com erro de apresentação, <em>Presentation error</em>.</p>

<h2 id="especulação">Especulação</h2>
<p>Entre devaneios e <strong>especulações</strong>, imagino que o problema ocorra pela composição de <code class="language-plaintext highlighter-rouge">string + variável</code> apresentada na saída padrão. Ao concatenar(juntar) a string com a variável na exibição, no meio dessa união deve ficar o terminador de string: <code class="language-plaintext highlighter-rouge">'\0'</code>. Exemplo: <code class="language-plaintext highlighter-rouge">a=4</code> e <code class="language-plaintext highlighter-rouge">b=5</code> então <code class="language-plaintext highlighter-rouge">soma=9</code>. A saída do comando <code class="language-plaintext highlighter-rouge">print("X = ", soma)</code>, especulo que seja “X = ‘\0’ 9”, ou seja, para a saída padrão, são duas strings exibidas na tela, mesmo que uma após a outra, mesmo que visualmente pareça cumprir as exigências, pois o <code class="language-plaintext highlighter-rouge">'0'</code> não aparece na tela.</p>

<p><strong>Cuidado!</strong> Isso é uma especulação, estou aprendendo python.</p>

<h2 id="format">.format()</h2>
<p>Duas outras ótimas fontes de pesquisa são: <a href="https://pt.stackoverflow.com/questions/225498/formatando-strings-com-format-e">stack<strong>overflow</strong></a> e a própria documentação da linguagem <a href="https://docs.python.org/3/library/string.html#custom-string-formatting">docs.python.org</a>.</p>

<ul>
  <li><a href="/ddp/docs/tecnology/progURI">voltar</a></li>
</ul>
:ET